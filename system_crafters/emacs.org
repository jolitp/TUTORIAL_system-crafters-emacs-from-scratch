#+title Emacs From Scratch Configuration

this adds the tangle parameter to all lisp code blocks in the file
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

when adding a property like the above, it needs to be re-evaluated
before taking effect re-evaluate by putting the cursor on that line
and pressing =C-c C-c= or by running =M-x org-mode=

* function definitions
** window-split-toggle
Toggle between horizontal and vertical split with two windows.  and
only two windows

#+begin_src emacs-lisp

(defun window-split-toggle ()
  (interactive)
  (if (> (length (window-list)) 2)
      (error "Can't toggle with more than 2 windows!")
    (let ((func (if (window-full-height-p)
                    #'split-window-vertically
                  #'split-window-horizontally)))
      (delete-other-windows)
      (funcall func)
      (save-selected-window
        (other-window 1)
        (switch-to-buffer (other-buffer))))))

#+end_src

** org-mode-setup

procedure to setup org mode

(I think he did it this way only to show how functions work in emacs)

#+begin_src emacs-lisp

(defun efs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode)
)

#+end_src

* Emacs From Scratch by David Willson
** youtube playlist
https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ
** Github page current
https://github.com/daviwil/emacs-from-scratch
** daviwil's configuration
https://github.com/daviwil/dotfiles/blob/master/Emacs.org
* DONE Emacs From Scratch #1 - Getting Started with a Basic Usable Configuration
https://www.youtube.com/watch?v=74zOY-vgkyw&list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ&index=1
** describe commands
by default =C-h= host the help commands

notable sub items of that are:
=describe-function=
=describe-variable=
=describe-key=

** Package sources

adds extra repositories of packages

#+begin_src emacs-lisp

; initialize package sources
(require 'package)

;; sets the links to the package repositories
(setq package-archives '(
                         ("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")
                        )
)
#+end_src

*** initialize use-package

initialize use-package on non-linux platforms

it's checking if use-package is installed if it's not it installs it

#+begin_src emacs-lisp
  
  ;; loads emacs packages and activate them
  (package-initialize)
  
  ;; check if package-archive-contents is present
  ;; if there are no pachage archive (downloaded packages)
  ;; on the computer, download them
  (unless package-archive-contents
   (package-refresh-contents))
  
  ;; tries to install use-package if it's not already installed
  (unless (package-installed-p 'use-package)
    (package-install 'use-package)
  )
  
  ;; loads use-package package
  (require 'use-package)
  
  ;; use-package-always-ensure makes it so
  ;; when require is used on a package
  ;; if the package is not downloaded
  ;; it will download it before
  ;; activating it
  (setq use-package-always-ensure t)
  ;; Enable use-package-always-ensure
  ;; if you wish this behavior to be
  ;; global for all packages:
  ;;
  ;; https://github.com/jwiegley/use-package
  
#+end_src

** Basic UI configuration
*** inhibit startup message

removes the startup message,
the one with the emacs logo and links
 
#+begin_src emacs-lisp

  (setq inhibit-startup-message t)
  
#+end_src

*** hides extra UI elements

#+begin_src emacs-lisp

  (scroll-bar-mode -1) ; disable visible scrollbar
  (tool-bar-mode -1) ; disable the toolbar
  (tooltip-mode -1) ; disable tooltips
  (menu-bar-mode -1) ; disable the menu bar
 
 
#+end_src

*** fringes configuration

On graphical displays, each Emacs window normally has narrow fringes
on the left and right edges. The fringes are used to display symbols
that provide information about the text in the window.

documentation:
https://www.gnu.org/software/emacs/manual/html_node/emacs/Fringes.html#:~:text=14.14%20Window%20Fringes,or%20to%20modify%20their%20width.

#+begin_src emacs-lisp
  
  (set-fringe-mode 10) ; give some breathin room?

#+end_src

*** visual bell

when you try to do an action that can't be done
emacs will flash the screen

#+begin_src emacs-lisp

(setq visible-bell t)
  
#+end_src

*** Font Configuration

#+begin_src emacs-lisp

  (set-face-attribute 'default nil
                      :font "Fira Code"
                      :height 140
  )

  ;; set the fixed pitch font face
  (set-face-attribute 'fixed-pitch nil
                      :font "Fira Code"
                      :height 140
  )

  ;; set hte variable pitch font face
  (set-face-attribute 'variable-pitch nil
                      :font "Prociono"
                      :height 150
                      :weight 'regular
                      )

#+end_src
*** theme

sets dracula as the default theme

to choose a theme afterwards:
=M-x counsel-load-theme= 

#+begin_src emacs-lisp

(use-package doom-themes)
(load-theme 'doom-dracula t) 

#+end_src

** command-log mode

shows a buffer on the right side of the screen with the keybindings
that are pressed with the command that is invoked

to activate it use =M-x global-command-log-buffer= and then for it to
appear: =clm/toggle-command-log-buffer= if you press =ESC= it goes away

this is more useful for him to help in the video, but can be useful for me too

#+begin_src emacs-lisp

(use-package command-log-mode)

#+end_src

** Ivy

one of the 2 completion frameworks for emacs the other is helm you can
use both at the same time

#+begin_src emacs-lisp

(use-package ivy
  ;; diminish hides the minor mode 
  ;; from the modeline
  :diminish
  :bind (
	 ("M-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill)
	)
  :config
  (ivy-mode 1)
)

#+end_src

** Counsel

#+begin_src emacs-lisp

(use-package counsel
  :ensure t)

#+end_src

*** counsel-find-file

shows the files in the directory in the minibuffer

*** sounsel-switch-buffer

shows the currently open buffers and lets you choose which one to switch to

** Keyboard behavior
*** Make ESC quit prompts

#+begin_src emacs-lisp

(global-set-key
 (kbd "<escape>") 'keyboard-escape-quit
)

#+end_src

** doom modeline

#+begin_src emacs-lisp

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom (
	      (doom-modeline-height 10)
	    )
)

#+end_src

** tips and tricks
*** M-x

M stants for =meta= which nowadays means the Alt key

the M-x keybinding by default binds to =run command=

with it you can run any command programmed in Emacs
including all of the commands from packages installed
* DONE Emacs From Scratch #2 - Adding Helpful UI Improvements
https://www.youtube.com/watch?v=IspAZtNTslY&list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ&index=2
** line numbers

#+begin_src emacs-lisp
  
  (column-number-mode)
  (global-display-line-numbers-mode t)

#+end_src

*** disable line number for some modes

#+begin_src emacs-lisp
  
  (dolist
    (mode '(org-mode-hook
            term-mode-hook
            shell-mode-hook
            eshel-mode-hook
           )
    )
    (add-hook mode (lambda ()
                   (display-line-numbers-mode 0)
                   )
    )
  )
  
#+end_src

** rainbow delimeters

#+begin_src emacs-lisp
  
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** which-key

starts a panel pop up when you start to type a keybinding

showing which keys are avainlable under that keybinding/prefix

shows information on the commands that can be pressed after you press
a key prefix, like =C-x= shows the keybindings for available commands
and shows the name of the command

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config (setq which-key-idle-delay 0)
)

#+end_src

** init and config keywords in lisp

:config and :init are two sides of the kind of code you want to run
when this package gets loaded

init happens before the package is loaded, allowing to do
preconfiguration for the package like setting variables
also allowing to invoke the mode itself

** ivy rich 

more details on completions from ivy

#+begin_src emacs-lisp
  
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1)
  )
  
#+end_src

** counsel
use counsel instead of the default emacs minibuffer prompts, counsel
gives more information

#+begin_src emacs-lisp
  
  (use-package counsel
    :bind (
           ("M-x" . counsel-M-x)
           ("C-x b" . counsel-buffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)
          )
    :config
  )
  
#+end_src

** helpful

#+begin_src emacs-lisp

(use-package helpful
  :ensure t
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-callable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key)
)

#+end_src

** doom-themes
already added at part 1
* TODO Emacs From Scratch #3 - Key Bindings and Evil

** all the icons

the first time you load your configuration on a new machine, you'll
need to run the following command so that the icons are downloaded and
displayed correctly

=M-x all-the-icons-install-fonts=

#+begin_src emacs-lisp

(use-package all-the-icons)

#+end_src


** general.el keybindings

general.el provides a more convenient method for binding keys in emacs
(for both evil and non-evil users).

#+begin_src emacs-lisp
 
(use-package general)	  

;; (general-define-key
 ;; it can be a list of 
 ;; keybindings also:
 ;; "C-M-k" 'some-function
 ;; "C-M-j" 'counsel-switch-buffer
;; )

#+end_src

he doesn't use general.el this way the way he uses it is to maintain a
global key prefix like <space> in spacemacs to od this you call
=(general-create-definer ...)=

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
  
    (rune/leader-keys
     "t" '(
           :ignore t
           :which-key "toggles"
           )
     "tt" '(counsel-load-theme :which-key "choose theme")
     "fs" '(save-buffer :which-key "save buffer")
     "ss" '(swiper :which-key "search")
     ":" '(counsel-M-x :which-key "run command")
     "ff" '(counsel-find-file :which-key "find file")
     ";" '(eval-last-sexp :which-key "eval expression")
     "TAB" '(counsel-switch-buffer :which-key "switch buffer")
     "bd" '(kill-buffer :which-key "delete buffer")
     "bk" '(kill-buffer :which-key "kill buffer")
     "bn" '(next-buffer :which-key "next buffer")
     "bp" '(previous-buffer :which-key "previous buffer")
     "qq" '(save-buffers-kill-emacs :which-key "quit emacs")
  
     ;; not working?
     "tw" '(window-split-toggle :which-key "toggle window split h/v")
    )
  )
  
#+end_src

* my own config
** keybindings for closing emacs

* swiper

Swiper is the interactive find I've been using with =SPC s s=

got the following error because, he had the package installed already
in his computer and I didn't

command-execute: Autoloading file /.../ivy.elc failed to define
function swiper needed to install swiper for the error to go away

#+begin_src emacs-lisp

(use-package swiper
  :ensure t)


#+end_src

* Keyboard behavior
** bind save buffer
rebinding save-buffer

#+begin_src emacs-lisp

(global-set-key (kbd "C-s") 'save-buffer)

#+end_src

* evil-mode
vim keybindings in emacs

#+begin_src emacs-lisp

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1) 
  ;; bind keys only in insert mode
  ;; (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  ;; (define-key-evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;;use visual line motions even outside of visual-line-mode buffers 
  ;; AH! this is a config that I noticed changing in doom-emacs
  ;;
  ;; it makes the cursor interpret warpped-around lines as more than one line
  ;;
  ;; by default the warpped line is considered one line until the very end
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  ;;strangelly_it_is_not_working

  ;; (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard 'normal)
)

  ;; IMPORTANT! C-z puts you in emacs-mode
  ;; a mode where evil-keybindings don't work
  ;; I struggled with that in the past


#+end_src

* evil-collection
collection of evil keybindings for different and many buffers/major
modes/parts of emacs

#+begin_src emacs-lisp

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init)) 

#+end_src

* hydra

allows to set transient keybindings (temporary keybindings)

This is a package for GNU Emacs that can be used to tie related
commands into a family of short bindings with a common prefix - a
Hydra.

#+begin_src emacs-lisp

(use-package hydra) 

(defhydra hydra-text-scale (
			    :timeout 5
			   )
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t)
)

(rune/leader-keys
  "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* projectile

Projectile is a project interaction library for Emacs.

#+begin_src emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/Projects")
    (setq projectile-project-search-path '("~/Projects"))
  )
  (setq projectile-switch-project-action #'projectile-dired)
)

(use-package counsel-projectile
  :config (counsel-projectile-mode)
)

#+end_src

* magit

#+begin_src emacs-lisp

(use-package magit

  ;; makes the diff window 
  ;; happen in the same window you are in
  ;; the defalt is showing another window
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-windows-except-diff-v1)
)

#+end_src

* forge

"offshoot" of magit it lets you pull down all the information from a
particular git repository like issues and pull requests, you can
manipulate those inside emacs.  like responding to comments from
github issues in emacs

forge needs authentication with github check the project page /
website for info on how to setup

#+begin_src emacs-lisp

(use-package forge)

#+end_src

* Org Mode
** initial config

#+begin_src emacs-lisp

(use-package org
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq org-ellipsis " ▾"
	;; the following config 
;; hide the formatting tags like *word* 
	org-hide-emphasis-markers t
  )
)

#+end_src

** org-appear

from davewill's config:

This package makes it much easier to edit Org documents when
org-hide-emphasis-markers is turned on.  It temporarily shows the
emphasis markers around certain markup elements when you place your
cursor inside of them. No more fumbling around with = and *
characters!

(not really working at the moment)

#+begin_src emacs-lisp

(use-package org-appear
  :hook (org-mode . org-appear-mode))

#+end_src

** org-bullets
package: org-bullets makes the bullets on headlines look nicer by
default it starts nice, but as there is more indentation the symbols
start to get a bit weird

code below giving error: error: Invalid face, org-level-1

#+begin_src emacs-lisp

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
;; his lame bullets
;;  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")
  (org-bullets-bullet-list '(
			     "➀"
			     "➁"
			     "➂"
			     "➃"
			     "➄"
			     "➅"
			     "➆"
			     "➇"
			     "➈"
			     "➉"
			     )
  )
)

#+end_src

** faces(fonts) for heading levels

#+begin_src emacs-lisp

(use-package org
  :config

    (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
			    '(("^ *\\([-]\\) "
				(0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
		    (org-level-2 . 1.1)
		    (org-level-3 . 1.05)
		    (org-level-4 . 1.0)
		    (org-level-5 . 1.1)
		    (org-level-6 . 1.1)
		    (org-level-7 . 1.1)
		    (org-level-8 . 1.1)))
	(set-face-attribute (car face) nil :font "Prociono" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    )

  (efs/org-font-setup)

;; replace list of hiphens with a dot
(font-lock-add-keywords 'org-mode
			'(
			  ("^ *\\([-]\\) "
			   (0 (prog1 ()
				(compoese-region (match-beginning 1)
						 (match-end 1)
						 "•"
						 )
			      )
			   )
			  )
			 )
)

;; Ensure that anything that should be fixed-pitch in Org files appears that way
(set-face-attribute 'org-block nil
		    :foreground nil
		    :inherit 'fixed-pitch
		    )

(set-face-attribute 'org-code nil
		    :inherit '(shadow fixed-pitch)
		    )

(set-face-attribute 'org-table nil
		    :inherit '(shadow fixed-pitch)
		    )

(set-face-attribute 'org-verbatim nil
		    :inherit '(shadow fixed-pitch)
		    )

(set-face-attribute 'org-special-keyword nil
		    :inherit '(font-lock-comment-face fixed-pitch)
		    )

(set-face-attribute 'org-meta-line nil
		    :inherit '(font-lock-comment-face fixed-pitch)
		    )

(set-face-attribute 'org-checkbox nil
		    :inherit 'fixed-pitch
		    )

;; davewill's config:
;;    (dolist (face '((org-level-1 . 1.5)
;;		    (org-level-2 . 1.45)
;;		    (org-level-3 . 1.4)
;;		    (org-level-4 . 1.35)
;;		    (org-level-5 . 1.3)
;;		    (org-level-6 . 1.25)
;;		    (org-level-7 . 1.2)
;;		    (org-level-8 . 1.1)
;;		)
;;	    )
;;      )
;;
;;  (set-face-attribute (car face) nil
;;		      :font "Prociono"
;;		      :weight 'regular
;;		      :height (cdr face)
;;  )
)

#+end_src

** visual-fill-column

Visual Fill Column is a small Emacs minor mode that mimics the effect
of FillColumn in VisualLineMode.

Instead of wrapping lines at the window edge, which is the standard
behaviour of visual-line-mode, it wraps lines at fill-column.

If fill-column is too large for the window, the text is wrapped at the
window edge.

#+begin_src emacs-lisp

(use-package org
  :config

    (defun efs/org-mode-visual-fill ()
	(setq visual-fill-column-width 100
		visual-fill-column-center-text t)
	(visual-fill-column-mode 1)
    )

    (use-package visual-fill-column
      :hook (org-mode . efs/org-mode-visual-fill)
    )
)

#+end_src

** org agenda

#+begin_src emacs-lisp

(use-package org
  :config 

  ;; shows the completion logs in 
  ;; agenda view
  (setq org-agenda-start-with-log-mode t)

  ;; logs the time of the completion 
  ;; of a task
  (setq org-log-done 'time)

  ;; folds all the done logging 
  ;; into a single colalpsable drawer
  (setq org-log-into-drawer t)

  (setq
   org-agenda-files
'(
"~/.system-crafters/orgfiles/tasks.org"
"~/.system-crafters/orgfiles/birthdays.org"
)
  )
)

#+end_src

** org todo states

#+begin_src emacs-lisp

;; org todo states
(use-package org
  :config
  (setq org-todo-keywords
   '(
	(sequence
	"TODO(t)"
	"NEXT(n)"
	"|"
	"DONE(d)"
	)
	(sequence
	"BACKLOG(b)"
	"PLAN(p)"
	"ACTIVE(a)" 
	"REVIEW(v)"
	"WAIT(w@/!)"
	"|"
	"COMPLETED(c)"
	"CANCELED(k@)"
	)
    )
  )
)

#+end_src

** custom agenda views 

HELP!

working but...  I can't scroll down to see all the content in the
buffer that appear

#+begin_src emacs-lisp

(use-package org
  :config
    (setq org-agenda-custom-commands
    '(("d" "Dashboard"
	((agenda "" ((org-deadline-warning-days 7)))
	(todo "NEXT"
	    ((org-agenda-overriding-header "Next Tasks")))
	(tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

	("n" "Next Tasks"
	((todo "NEXT"
	    ((org-agenda-overriding-header "Next Tasks")))))

	("W" "Work Tasks" tags-todo "+work-email")

	;; Low-effort next actions
	("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
	((org-agenda-overriding-header "Low Effort Tasks")
	(org-agenda-max-todos 20)
	(org-agenda-files org-agenda-files)))

	("w" "Workflow Status"
	((todo "WAIT"
		((org-agenda-overriding-header "Waiting on External")
		(org-agenda-files org-agenda-files)))
	(todo "REVIEW"
		((org-agenda-overriding-header "In Review")
		(org-agenda-files org-agenda-files)))
	(todo "PLAN"
		((org-agenda-overriding-header "In Planning")
		(org-agenda-todo-list-sublevels nil)
		(org-agenda-files org-agenda-files)))
	(todo "BACKLOG"
		((org-agenda-overriding-header "Project Backlog")
		(org-agenda-todo-list-sublevels nil)
		(org-agenda-files org-agenda-files)))
	(todo "READY"
		((org-agenda-overriding-header "Ready for Work")
		(org-agenda-files org-agenda-files)))
	(todo "ACTIVE"
		((org-agenda-overriding-header "Active Projects")
		(org-agenda-files org-agenda-files)))
	(todo "COMPLETED"
		((org-agenda-overriding-header "Completed Projects")
		(org-agenda-files org-agenda-files)))
	(todo "CANC"
		((org-agenda-overriding-header "Cancelled Projects")
		(org-agenda-files org-agenda-files))))))
    )
)

#+end_src

** Tags

#+begin_src emacs-lisp
(use-package org
  :config
    ;; tags in org mode
    (setq org-tag-alist
	'(
	    (:startgroup)
	    ; Put mutually exclusive tags here
	    (:endgroup)
	    ("@errand" . ?E)
	    ("@home" . ?H)
	    ("@work" . ?W)
	    ("agenda" . ?a)
	    ("planning" . ?p)
	    ("publish" . ?P)
	    ("batch" . ?b)
	    ("note" . ?n)
	    ("idea" . ?i)
	)
    )
)

#+end_src

** org-refile

move DONE items ton archive file 

to move call:
=M-x org-refile=

#+begin_src emacs-lisp

(use-package org
  :config
  (setq org-refile-targets
	'(
	  ("archive.org" :maxlevel . 1)
	  ("tasks.org" :maxlevel . 1)
	  )
	)
  ;; save org buffers after refiling
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
)

#+end_src

** capture templates

to use it call:
=M-x org-capture=

#+begin_src emacs-lisp

(use-package org
  :config
  (setq org-capture-templates
   `(
	("t" "Tasks / Projects")
	("tt"
	"Task"
	entry (
	       file+olp
	       "~/.system-crafters/orgfiles/tasks.org"
	       "Inbox"
	)
	"* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1
	)

	("j" "Journal Entries")
	("jj" "Journal" entry
	    (file+olp+datetree "~/.system-crafters/orgfiles/journal.org")
	    "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
	    ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
	    :clock-in :clock-resume
	    :empty-lines 1)
	("jm" "Meeting" entry
	    (file+olp+datetree "~/.system-crafters/orgfiles/journal.org")
	    "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
	    :clock-in :clock-resume
	    :empty-lines 1)

	("w" "Workflows")
	("we"
	    "Checking Email"
	    entry (
		    file+olp+datetree "~/.system-crafters/orgfiles/journal.org"
	    )
	    "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1
	)

	("m" "Metrics Capture")
	("mw"
	    "Weight"
	    table-line (
		file+headline
		"~/.system-crafters/orgfiles/metrics.org"
		"Weight"
	    )
	"| %U | %^{Weight} | %^{Notes} |" :kill-buffer t
	)
 )
   )
)

#+end_src

** org habit

to use org habit: make a habits file: habits.org for example

make a TODO heading with a scheduled property

put a special property in the heading, with: =M-x org-set-property=, and
set it to: style : habit (the property name is style, the value of the
property is habit)

the result should be something like:

TODO brush teeth
SCHEDULED: <2021-12-30 Fri +1d>
:PROPERTIES:
:STYLE: habit
:END:

and add the file habits.org to the agenda files so it can show up in
the agenda

it shows a bar on the agenda view, showing whether or not you been
doing the habit

#+begin_src emacs-lisp

;; package org-habit
(use-package org
  :config
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)
)

#+end_src

** Configure Babel Languages

#+begin_src emacs-lisp
      
(org-babel-do-load-languages
  'org-babel-load-languages
    '(
      (emacs-lisp . t)
      (python . t)
     )
)
;; adds unix config files as 
;; an accepted language 
(push '("conf-unix" . conf-unix) 
        org-src-lang-modes)

#+end_src

*** python command

to run code blocks in org mode: =C-c C-c=

#+begin_src emacs-lisp

(setq org-babel-python-command "python3")

#+end_src

*** disable confirmation before running

removes confirmation before running org-babel src blocks

#+begin_src emacs-lisp

(setq org-babel-confirm-evaluate nil)

#+end_src

** Auto Tangle Configuration Files

was not working initially, working after restarting editor

#+begin_src emacs-lisp
                
    ;; Automatically tangle our Emacs.org config file when we save it
    (defun efs/org-babel-tangle-config ()
      (when (string-equal (buffer-file-name)
                          (expand-file-name "~/Projects/emacs_configs/system_crafters/emacs.org"))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle))))
    
    (add-hook 'org-mode-hook
              (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
               
#+end_src 
   
** structure templates
shortcut or "snippet" to create src blocks in org mode, with the
appropriate language

#+begin_src emacs-lisp

;; this is required as of Org 9.2
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
;; to use type on an org file, 
;; at the start of a line:
;; <el TAB

;; documentation for supported 
;; org-babel languages:
;; https://orgmode.org/worg/org-contrib/babel/languages/index.html

#+end_src

* Applications

It is possible to use emacs org-mode write to any file, not only lisp
code, here is a default config file for some app in the system that
uses a generic key = value pair for configuration

** Some App

#+begin_src conf
  value = 42
  value = "string"
#+end_src




* Part 8 - Build your own IDE with lsp-mode

* notes / tips & tricks
** make emacs update the changes made to an open buffer

Emacs by default don't update open buffers.

If a file is modified outside of emacs while a buffer is open on that
file, the changes wont show in emacs.

To show the changes you need to "revert" the buffer, which means
update the buffer to show the current contents of the file, and not
the "saved" version open on emacs.  Call command =M-x revert-buffer=

There is a minor mode that automatically reverts the buffers.  =M-x
auto-revert-mode=

** Evaluating lisp code in emacs

to evaluate lisp code inside emacs or not having to close emacs and
open it again to see the changes use =M-x eval-buffer= to evaluate the
current open document use =M-x eval-defun= to evaluate the function in
the line of the cursor

to evaluate a line use: =C-x C-e= with the cursor(point) on that line

** emacs package management

*** use package 
use package is like a package manager for emacs it makes it easier to
install packages

*** emacs default package manager
there is already a package manager built into emacs

*** view package status

use =M-x list-packages= to see all the
available/installed/built-in/incompatible packages the repository of
packages that packages are available by default is elpa.org

*** package archive contents
package-archive-contents is the variable that holds the links that
were setup earlier

**** TODO check back on the video 
check back on the video 
he talks about this to remember
what it does
  
** messages buffer

you can use the **messages** buffer to see the messages that poped up in
the line below the modeline

** describe function
   
=C-h f= calls describe function

** more options in ivy minibuffers
 
press M-o then chose one of the options to get more info on the item
selected

** set keybindings globally
to set a keybinding gloabally and "manually":

=(global-set-key (kbd "C-M-j")
   'counsel-switch-buffer)=

** set keybindings for specific modes
 
in case you want to change a keybind inside a given mode(major mode
only?)  start with: (define-key

followed by: 
=[name-of-mode]-map=
   =(kbd "[keys]")= =[command-to-bind-to]=

there are 2 ways to make this easier using :bind in use-package or
package: general.el

** remove an existing keybinding

to remove an existing keybind use
=(global-unset-key (kbd ... ))=

** evaluate lisp in the minibuffer

use =M-:= to enter an lisp expression on the minibuffer and eval it good
to unset a keybinding

** check matching parenthesis under cursor

to check if there are problems in the parenthesis in lisp use M-x
check-parens it you move the cursr to the problematic parenthesis

** search project with ripgrep
assuming that ripgrep is installed and is on the PATH run: =M-x
counsel-projectile-rg=

on the resulting minibuffer pressing =C-c C-o= it shows the results in
a persistent buffer in this buffer pressing enter on a file listed
opens the file showing the place where the searched term occur

pressing o on the item mimics the commands that you get when pressing
M-o on the minibuffer

to get reid of the buffer press =q=

** dirs locals files
forgot to take note on that, check back on the videos later

** using magit
to use magit press: 
=M-x magit-status= 

or =C-c g= (by default)

** better alternative to git rebase

in the 4th video he shows a better way of handling git history
cleanup, instead of doing rebase shown areoud =47:30=

** make sure to use orgmode.org repository
make sure you are using the latest version of org-mode, in the
package-archives config put:

"org¨ . "https://orgmode.org/elpa"

already did that

** set tags on a header in org-mode

to set tegs on a header:
=M-x org-set-tags-command=
or
=C-c C-q=

* errors
** package not found

if you get an error like file error: http://melpa.org/packages/
[name_of_package]-[number].tar, not found

run the command: =M-x package-refresh-contents=
** doom-dark+ theme loading with error
* emacs lisp 
** unless block/statemant/function
the unless block is like a reverse if statement

** predicates
every something-p function is apredicate a predicate is a function
that returns a boolean, t(true) or nil(false)
 
** symbols in lisp
the 'name synthax means it's a symbol in lisp.

In the following code, for example

(load-theme 'doom-dracula t) 
;; loads the theme

'doom-dracula 

is a symbol

* useful default keybindings
** kill buffer
You can run the command 
=kill-buffer= with =C-x k=
** switch to buffer
You can run the command 
=switch-to-buffer= with =C-x b=
** repeat command in emacs

emacs have a repeat command function
=M-x repeat-command=
or
=M-x repeat-complex-command=

does evil mode uses those commands behind the hood for the =.= key?

* questions
** relative line numbers
how to get relative line numbers?  and when I use evil mode, how to
change line numbers from relative to absolute based on whether I'm on
normal mode or edit mode
** have different layouts for specific things
like a layout for programming in certain languages with a pannel on
the left and tabs

and a layout for org where the other windows are hidden
** line numbers for org mode src blocks
is there a way to have a separate line number for src blocks based on
the output of the org untangle or watever?
** change colors of rainbow delimeter
how to change the colors of rainbow delimiters?  he says it is based
on the theme but can I choose the colors of delimeters for every
theme?
** highlight delimeter under point
how to highlight the delimiter pair under the mouse?
** change indentation rules for lisp
** change the way emacs goes up and down the page?
now it jumps half a page at a time, very disorienting

I want the cursor to be on the center of the screen at all times, or
better have an area close to the center of the screen where if I move
the cursor up or down it does not roll the page up or down, but if I
go beyound that area the screen starts to move
** davewill's switch buffer prompt
how to get the switch to buffer "window" that he has in the video?
shows up at video 4 at around 23:00
** change magit keybindings

how to change the keybindings in magit?

exemple: 
change the 
=C-c C-c=

in the commit message to confirm
** org-appear for links
can I have something like =org-appear= for links?  show the full markup
 for links when the cursor is on it
** make selections get whole line when going up/down
how to make selections that go up and down select the whole line?
** tabs like in a browser
** left panel as a file browser
** change visual-fill-column width based on the window size
how to make the "borders"/padding on orgmode take a percentage of the
window/screen instead of a fixed number?
** change lisp autocompletion
** change placement of CLOSED, SCHEDULE properties
how to make the drawers go one on each line
instead of on the same line
like:
CLOSED: [2021-05-26 Wed 17:18]
SCHEDULED: <2021-05-27 Thu>

insead of:
CLOSED: [2021-05-26 Wed 17:18] SCHEDULED: <2021-05-27 Thu>
** save macros by name
macros started by =F3= and played by =F4= in doom emacs
** use spaces to indent instead of tabs
** specific buffer open horizontally or vertically every time
how to make a specific buffer open on the horizontal or vertical every
time?
** how do the bookmark feature works in emacs?
saving places of files fro quick travel

can I give names to those?
** archive files made automatically
how to make archives for each file automatically?  like tasks.org have
archive_tasts.org or archive/archive-tasks.org
** toggle highlight whitespaces
show whitespaces symbols
** move cursor after copy selected text
when selecting and copying text in evil mode I want the cursor to move
to the end of the selection instead of to the beginning
** use of :ensure on require 'package-name
if =use-package-always-ensure= is set to true,
like in the snippet below

  (setq use-package-always-ensure t)
  
why he puts :ensure on other require packages?

isin't it redundant?
** show bars above and below the cursor line
like in vscode
** highlight current line
* missing behavior/config
** keybidings
*** SPC q q 
quit emacs
** org bullets
** relative line numbers in normal mode and absolute line numbers in edit mode
** in org mode src blocks don't zoom in and out
in org mode src blocks don't zoom in and out together with the rest of
the text

(using =SPC t s=)
** line wrap
** symbols replacing words
from distrotube's video

https://www.youtube.com/watch?v=5iCjhdCUuLg&list=PL5--8gKSku15uYCnmxWPO17Dq6hVabAB4&index=1

*** show the actual word when the cursor is in the symbol
search how to do that

related to the org mode variant below
** show emphasis markers when cursor in on the word
config from reddit: hide emphasis markers unless the cursor is at the
word link:

https://www.reddit.com/r/orgmode/comments/43uuck/temporarily_show_emphasis_markers_when_the_cursor/

(didnt work)

found a way in davewill config using the package =org-appear=
** flycheck
*** for programming languages
*** for english
*** for portuguese
** get some keybindings from doom
check the =SPC= -something keybindings for most used functions
*** projectile
*** magit
** org babel tangling at save is slow
slow on a mechanical drive

is it still slow on an ssd?
** colored braces missing
* unnecessary configs 
** evil-magit
no longer needed and wont work anymore since I use efil-collection

=(use-package evil-magit=
=:after magit=
=)=

NOTE [2021-02-01]: 
This package was removed from MELPA.

NOTE [2020-11-24]: 
This repository is no longer maintained. 
This package is now a part of 
evil-collection.
* emacs from scratch followalong
** go back to earlier videos and separate config based on video

** create a git repo for this project

** stopped at
https://youtu.be/xaZMwNELaJY?t=646
